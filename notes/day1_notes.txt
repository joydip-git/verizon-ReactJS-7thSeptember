pre-react:
JavaScript: OOP concepts (prototype based programming)
new features in JS: class,ctor, let, const, arrow functions, spread operator

Node JS

react-creating application
create react app without any tool
create-react-app --> going to use next time onwards
babel etc.
webpack etc.
loaders etc.

react concepts:
later

Node JS and NPM
VS Code

techniques to crate JS object:
a. object literal syntax
b. function constructor
c. Object.create()
d. class with new keyword

prototype object:
it is an object for function constructor created in JS runtime context
contains two properties: 
a. constructor: refers to the function itself
b. __proto__: refers to the 'Object' prototype object [function object(){}]

actual object: (new keyword)
when a JS object is created based on a function constructor call, then this object is linked to the prototype object of the function constructor itself.
__proto__: refer to the prototype object of the function constructor (based on which this object has been created)
other properties (fn,ln,print etc.)

object function ---> prototype object
person function ---> prototype object
trainee function ---> prototype object
saliha variable ---> actual object

var p = {
  name: 'joy'
};

p.location = 'bangalore';

how to access prototype object
a. from an object (created based on the function constructor itself): 
using __proto__ property of that object
aliha.__proto__

b. from function constructor itself: 
using <func-ctor-name>.prototype property
trainee.prototype

ECMAScript: Guideline language for every scripting language

ES2015/ES6: let, const, class, constructor, extends, super, spread operator, arrow functions, string template, etc. 
ES2017/ES7, ES8, ES9...
















