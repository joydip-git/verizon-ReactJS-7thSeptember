'render' props

1. convert CRP to a class component
2. so that state can be used to store 'count' value
3. create the function(s): increaseCount/decreaseCount
4. call the props.render() and pass the state count data and the function(s) as arguments

5. from App.js interact with CRP to pass the callback via render prop and receive data as well as function(s)
6. produce CC by injecting the receieved data and function(s)

7. let the CC be a functional component
8. display the injceted count value and call the function to increase/decrease the count value from CC


Mounting:
1. parent ctor gets called
2. parent getDerivedStateFromProps executed
3. parent gets rendered
	a. child ctor gets called
	b. child getDerivedStateFromProps executed
	c. child gets rendered
	d. child gets mounted
4. parent component gets mounted

Update:
1. parent getDerivedStateFromProps executed
2. parent gets rendered
	a. child getDerivedStateFromProps executed
	b. child should component update gets called
	c. child gets rendered
	d. child getsnapshot called
	e. child componentDidUpdate gets called
3. parent componentDidUpdate gets called

destruction:
    componentWillUnmount

error:
    componentDidCatch


state in class component vs. state in functiontal component (via useState)
a. state in class comp is alsways a JS object ({})
   ctor(){ this.state={val:0, name:'joydip',cond:true, arr:[1,2,3,4], product:{}})
   state in functional comp can be anything
	const [val, setVal] = useState(0)
	const [condition, setCondition] = useState(true)
	useStatde('joydip')
        useState([1,2,3,4])
	useState({count:0, value:20})

b. in class comp you can have only one state object
   in functional comp you can have multiple state

c. there are multiple versions of setState method in class component
	setState({});
	setState({}, ()=>{});
	setState(ps=>{ return {}});
	setState(ps=>{ return {}}, ()=>{});
	setState((ps,props)=>{return {}});
	setState((ps,props)=>{return {}}, ()=>{});
   there are only two versions of setX method in functional component
	setX({});
	setX(ps=>{return {}});

d. in order to access state in class component you use 'this' keyword (this.state)
   in order to access state in functional component you DO NOT use 'this' keyword

e. in class component newState is merged with old state, where the keys thar are not updated, remain as it is (not disturbance)
   in functional component oldState is replaced by newstate, hence you will loose those keys which are not updated in the new state. in order to retain the old state keys, you should use object destructuring of oldstate and merge manually into new state and then update whichever keys that you want of the old state
   



